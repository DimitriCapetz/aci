#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
{  
    "infraHPortS":{  
        "attributes":{  
            "dn":"uni/infra/accportprof-leaf101-102_if_profile/hports-esxi_test-typ-range",
            "name":"esxi_test",
            "rn":"hports-esxi_test-typ-range",
            "status":"created,modified"
        },
        "children":[  
            {  
                "infraPortBlk":{  
                    "attributes":{  
                        "dn":"uni/infra/accportprof-leaf101-102_if_profile/hports-esxi_test-typ-range/portblk-block2",
                        "fromPort":"11",
                        "toPort":"11",
                        "name":"block2",
                        "rn":"portblk-block2",
                        "status":"created,modified"
                    },
                    "children":[  

                    ]
                }
            },
            {  
                "infraRsAccBaseGrp":{  
                    "attributes":{  
                        "tDn":"uni/infra/funcprof/accbundle-test_arya_vpc_pol_grp",
                        "status":"created,modified"
                    },
                    "children":[  

                    ]
                }
            }
        ]
    }
}
'''
raise RuntimeError('Please review the auto generated code before ' +
                    'executing the output. Some placeholders will ' +
                    'need to be changed')

# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.request
import cobra.mit.session
import cobra.model.infra
import cobra.model.pol
from cobra.internal.codec.xmlcodec import toXMLStr

# log into an APIC and create a directory object
ls = cobra.mit.session.LoginSession('https://1.1.1.1', 'admin', 'password')
md = cobra.mit.access.MoDirectory(ls)
md.login()

# the top level object on which operations will be made
polUni = cobra.model.pol.Uni('')
infraInfra = cobra.model.infra.Infra(polUni)
infraAccPortP = cobra.model.infra.AccPortP(infraInfra, 'leaf101-102_if_profile')

# build the request using cobra syntax
infraHPortS = cobra.model.infra.HPortS(infraAccPortP, name=u'esxi_test')
infraPortBlk = cobra.model.infra.PortBlk(infraHPortS, name=u'block2', fromPort=u'11', toPort=u'11')
infraRsAccBaseGrp = cobra.model.infra.RsAccBaseGrp(infraHPortS, tDn=u'uni/infra/funcprof/accbundle-test_arya_vpc_pol_grp')


# commit the generated code to APIC
print toXMLStr(infraAccPortP)
c = cobra.mit.request.ConfigRequest()
c.addMo(infraAccPortP)
md.commit(c)


#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
{"totalCount":"1","imdata":[{"fvTenant":{"attributes":{"descr":"","dn":"uni/tn-ExampleSdkTenant","name":"ExampleSdkTenant","nameAlias":"","ownerKey":"","ownerTag":""},"children":[{"vnsSvcCont":{"attributes":{}}},{"fvRsTenantMonPol":{"attributes":{"tnMonEPGPolName":""}}},{"fvCtx":{"attributes":{"descr":"","knwMcastAct":"permit","name":"myVRF","nameAlias":"","ownerKey":"","ownerTag":"","pcEnfDir":"ingress","pcEnfPref":"enforced"},"children":[{"vzAny":{"attributes":{"descr":"","matchT":"AtleastOne","name":"","nameAlias":"","prefGrMemb":"disabled"}}},{"fvRsOspfCtxPol":{"attributes":{"tnOspfCtxPolName":""}}},{"fvRsCtxToEpRet":{"attributes":{"tnFvEpRetPolName":""}}},{"fvRsCtxToExtRouteTagPol":{"attributes":{"tnL3extRouteTagPolName":""}}},{"fvRsBgpCtxPol":{"attributes":{"tnBgpCtxPolName":""}}}]}},{"fvBD":{"attributes":{"arpFlood":"no","descr":"","epClear":"no","epMoveDetectMode":"","ipLearning":"yes","limitIpLearnToSubnets":"yes","llAddr":"::","mac":"00:22:BD:F8:19:FF","mcastAllow":"no","multiDstPktAct":"bd-flood","name":"myBD","nameAlias":"","ownerKey":"","ownerTag":"","type":"regular","unicastRoute":"yes","unkMacUcastAct":"proxy","unkMcastAct":"flood","vmac":"not-applicable"},"children":[{"fvSubnet":{"attributes":{"ctrl":"nd","descr":"","ip":"10.20.30.1/24","name":"","nameAlias":"","preferred":"no","scope":"private","virtual":"no"}}},{"fvRsIgmpsn":{"attributes":{"tnIgmpSnoopPolName":""}}},{"fvRsCtx":{"attributes":{"tnFvCtxName":"myVRF"}}},{"fvRsBdToEpRet":{"attributes":{"resolveAct":"resolve","tnFvEpRetPolName":""}}},{"fvRsBDToNdP":{"attributes":{"tnNdIfPolName":""}}}]}}]}}]}
'''
#raise RuntimeError('Please review the auto generated code before ' +
#                    'executing the output. Some placeholders will ' +
#                    'need to be changed')

# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.naming
import cobra.mit.request
import cobra.mit.session
import cobra.model.fv
import cobra.model.vns
import cobra.model.vz
from cobra.internal.codec.xmlcodec import toXMLStr

#Import urllib3 to disable cert warnings
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# log into an APIC and create a directory object
ls = cobra.mit.session.LoginSession('https://ssacimn010a02apic01.ss.astontech.com', 'admin', 'amkunn4D')
md = cobra.mit.access.MoDirectory(ls)
md.login()

# the top level object on which operations will be made
# Confirm the dn below is for your top dn
topDn = cobra.mit.naming.Dn.fromString('uni/tn-ExampleSdkTenant')
topParentDn = topDn.getParent()
topMo = md.lookupByDn(topParentDn)

# build the request using cobra syntax
fvTenant = cobra.model.fv.Tenant(topMo, ownerKey='', name='ExampleAryaTenant', descr='My First Arya Tenant', nameAlias='', ownerTag='')
vnsSvcCont = cobra.model.vns.SvcCont(fvTenant)
fvRsTenantMonPol = cobra.model.fv.RsTenantMonPol(fvTenant, tnMonEPGPolName='')
fvCtx = cobra.model.fv.Ctx(fvTenant, ownerKey='', name='myVRF', descr='My First Arya VRF', knwMcastAct='permit', pcEnfDir='ingress', nameAlias='', ownerTag='', pcEnfPref='enforced')
vzAny = cobra.model.vz.Any(fvCtx, prefGrMemb='disabled', matchT='AtleastOne', name='', descr='', nameAlias='')
fvRsOspfCtxPol = cobra.model.fv.RsOspfCtxPol(fvCtx, tnOspfCtxPolName='')
fvRsCtxToEpRet = cobra.model.fv.RsCtxToEpRet(fvCtx, tnFvEpRetPolName='')
fvRsCtxToExtRouteTagPol = cobra.model.fv.RsCtxToExtRouteTagPol(fvCtx, tnL3extRouteTagPolName='')
fvRsBgpCtxPol = cobra.model.fv.RsBgpCtxPol(fvCtx, tnBgpCtxPolName='')
fvBD = cobra.model.fv.BD(fvTenant, ownerKey='', vmac='not-applicable', unkMcastAct='flood', name='myBD', descr='', unicastRoute='yes', epClear='no', unkMacUcastAct='proxy', arpFlood='no', limitIpLearnToSubnets='yes', llAddr='::', mcastAllow='no', mac='00:22:BD:F8:19:FF', epMoveDetectMode='', nameAlias='', ownerTag='', multiDstPktAct='bd-flood', type='regular', ipLearning='yes')
fvSubnet = cobra.model.fv.Subnet(fvBD, name='', descr='', ctrl='nd', ip='10.20.30.1/24', preferred='no', virtual='no', nameAlias='')
fvRsIgmpsn = cobra.model.fv.RsIgmpsn(fvBD, tnIgmpSnoopPolName='')
fvRsCtx = cobra.model.fv.RsCtx(fvBD, tnFvCtxName='myVRF')
fvRsBdToEpRet = cobra.model.fv.RsBdToEpRet(fvBD, resolveAct='resolve', tnFvEpRetPolName='')
fvRsBDToNdP = cobra.model.fv.RsBDToNdP(fvBD, tnNdIfPolName='')


# commit the generated code to APIC
print toXMLStr(topMo)
c = cobra.mit.request.ConfigRequest()
c.addMo(topMo)
md.commit(c)


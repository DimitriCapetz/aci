#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
{"totalCount":"1","imdata":[{"fvTenant":{"attributes":{"descr":"Tenant API Description","dn":"uni/tn-ExampleApiTenant","name":"ExampleApiTenant","nameAlias":"","ownerKey":"","ownerTag":""},"children":[{"vzBrCP":{"attributes":{"descr":"","name":"AllTraffic","nameAlias":"","ownerKey":"","ownerTag":"","prio":"unspecified","scope":"context","targetDscp":"unspecified"},"children":[{"vzSubj":{"attributes":{"consMatchT":"AtleastOne","descr":"","name":"AllTraffic","nameAlias":"","prio":"unspecified","provMatchT":"AtleastOne","revFltPorts":"yes","targetDscp":"unspecified"},"children":[{"vzRsSubjFiltAtt":{"attributes":{"directives":"","tnVzFilterName":"default"}}}]}}]}},{"vnsSvcCont":{"attributes":{}}},{"fvCtx":{"attributes":{"descr":"","knwMcastAct":"permit","name":"ExampleApiTenant_VRF","nameAlias":"","ownerKey":"","ownerTag":"","pcEnfDir":"ingress","pcEnfPref":"enforced"},"children":[{"vzAny":{"attributes":{"descr":"","matchT":"AtleastOne","name":"","nameAlias":"","prefGrMemb":"disabled"}}},{"fvRsOspfCtxPol":{"attributes":{"tnOspfCtxPolName":""}}},{"fvRsCtxToEpRet":{"attributes":{"tnFvEpRetPolName":""}}},{"fvRsCtxToExtRouteTagPol":{"attributes":{"tnL3extRouteTagPolName":""}}},{"fvRsBgpCtxPol":{"attributes":{"tnBgpCtxPolName":""}}}]}},{"fvBD":{"attributes":{"arpFlood":"no","descr":"","epClear":"no","epMoveDetectMode":"","ipLearning":"yes","limitIpLearnToSubnets":"yes","llAddr":"::","mac":"00:22:BD:F8:19:FF","mcastAllow":"no","multiDstPktAct":"bd-flood","name":"ExampleApiTenant_BD","nameAlias":"","ownerKey":"","ownerTag":"","type":"regular","unicastRoute":"yes","unkMacUcastAct":"proxy","unkMcastAct":"flood","vmac":"not-applicable"},"children":[{"fvSubnet":{"attributes":{"ctrl":"nd","descr":"","ip":"192.168.10.1/24","name":"","nameAlias":"","preferred":"no","scope":"private","virtual":"no"}}},{"fvSubnet":{"attributes":{"ctrl":"nd","descr":"","ip":"192.168.1.1/24","name":"","nameAlias":"","preferred":"no","scope":"private","virtual":"no"}}},{"fvRsIgmpsn":{"attributes":{"tnIgmpSnoopPolName":""}}},{"fvRsCtx":{"attributes":{"tnFvCtxName":"ExampleApiTenant_VRF"}}},{"fvRsBdToEpRet":{"attributes":{"resolveAct":"resolve","tnFvEpRetPolName":""}}},{"fvRsBDToNdP":{"attributes":{"tnNdIfPolName":""}}}]}},{"fvRsTenantMonPol":{"attributes":{"tnMonEPGPolName":""}}},{"fvAp":{"attributes":{"descr":"","name":"DevNet-AP1","nameAlias":"","ownerKey":"","ownerTag":"","prio":"unspecified"},"children":[{"fvAEPg":{"attributes":{"descr":"","fwdCtrl":"","isAttrBasedEPg":"no","matchT":"AtleastOne","name":"DevNet-DB","nameAlias":"","pcEnfPref":"unenforced","prefGrMemb":"exclude","prio":"unspecified"},"children":[{"fvRsProv":{"attributes":{"matchT":"AtleastOne","prio":"unspecified","tnVzBrCPName":"AllTraffic"}}},{"fvRsDomAtt":{"attributes":{"classPref":"encap","delimiter":"","encap":"unknown","encapMode":"auto","instrImedcy":"immediate","netflowPref":"disabled","primaryEncap":"unknown","resImedcy":"immediate","tDn":"uni/vmmp-VMware/dom-ssacimn010a02vds01"}}},{"fvRsCustQosPol":{"attributes":{"tnQosCustomPolName":""}}},{"fvRsBd":{"attributes":{"tnFvBDName":"DevNet-BD1"}}}]}},{"fvAEPg":{"attributes":{"descr":"","fwdCtrl":"","isAttrBasedEPg":"no","matchT":"AtleastOne","name":"DevNet-Web","nameAlias":"","pcEnfPref":"unenforced","prefGrMemb":"exclude","prio":"unspecified"},"children":[{"fvRsDomAtt":{"attributes":{"classPref":"encap","delimiter":"","encap":"unknown","encapMode":"auto","instrImedcy":"immediate","netflowPref":"disabled","primaryEncap":"unknown","resImedcy":"immediate","tDn":"uni/vmmp-VMware/dom-ssacimn010a02vds01"}}},{"fvRsCons":{"attributes":{"prio":"unspecified","tnVzBrCPName":"AllTraffic"}}},{"fvRsCustQosPol":{"attributes":{"tnQosCustomPolName":""}}},{"fvRsBd":{"attributes":{"tnFvBDName":"ExampleApiTenant_BD"}}}]}}]}}]}}]}
'''

# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.request
import cobra.mit.session
import cobra.model.fv
import cobra.model.pol
import cobra.model.vns
import cobra.model.vz
from cobra.internal.codec.xmlcodec import toXMLStr

# Import GetPass for password masking
import getpass

#Disable Cert Warnings for Test Environment
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# log into an APIC and create a directory object
apicIp = raw_input('Name or IP of APIC: ')
user = raw_input('TACACS+ Username: ')
pa = getpass.getpass()
ls = cobra.mit.session.LoginSession('https://' + apicIp, 'apic:TACACS\\' + user, pa)
md = cobra.mit.access.MoDirectory(ls)
md.login()

# the top level object on which operations will be made
polUni = cobra.model.pol.Uni('')

# build the request using cobra syntax
fvTenant = cobra.model.fv.Tenant(polUni, ownerKey='', name='DMZTenant', descr='Tenant for DMZ Applications', nameAlias='', ownerTag='')
vzBrCP = cobra.model.vz.BrCP(fvTenant, ownerKey='', name='AllTraffic', prio='unspecified', targetDscp='unspecified', descr='', nameAlias='', ownerTag='')
vzSubj = cobra.model.vz.Subj(vzBrCP, revFltPorts='yes', name='AllTraffic', prio='unspecified', targetDscp='unspecified', nameAlias='', descr='', consMatchT='AtleastOne', provMatchT='AtleastOne')
vzRsSubjFiltAtt = cobra.model.vz.RsSubjFiltAtt(vzSubj, directives='', tnVzFilterName='default')
vnsSvcCont = cobra.model.vns.SvcCont(fvTenant)
fvCtx = cobra.model.fv.Ctx(fvTenant, ownerKey='', name='DMZ_VRF', descr='', knwMcastAct='permit', pcEnfDir='ingress', nameAlias='', ownerTag='', pcEnfPref='enforced')
vzAny = cobra.model.vz.Any(fvCtx, prefGrMemb='disabled', matchT='AtleastOne', name='', descr='', nameAlias='')
fvRsOspfCtxPol = cobra.model.fv.RsOspfCtxPol(fvCtx, tnOspfCtxPolName='')
fvRsCtxToEpRet = cobra.model.fv.RsCtxToEpRet(fvCtx, tnFvEpRetPolName='')
fvRsCtxToExtRouteTagPol = cobra.model.fv.RsCtxToExtRouteTagPol(fvCtx, tnL3extRouteTagPolName='')
fvRsBgpCtxPol = cobra.model.fv.RsBgpCtxPol(fvCtx, tnBgpCtxPolName='')
fvBD = cobra.model.fv.BD(fvTenant, ownerKey='', vmac='not-applicable', unkMcastAct='flood', name='DMZ_BD', descr='', unicastRoute='yes', epClear='no', unkMacUcastAct='proxy', arpFlood='no', limitIpLearnToSubnets='yes', llAddr='::', mcastAllow='no', mac='00:22:BD:F8:19:FF', epMoveDetectMode='', nameAlias='', ownerTag='', multiDstPktAct='bd-flood', type='regular', ipLearning='yes')
fvSubnet = cobra.model.fv.Subnet(fvBD, name='', descr='', ctrl='nd', ip='192.168.168.1/24', preferred='no', virtual='no', nameAlias='')
fvRsIgmpsn = cobra.model.fv.RsIgmpsn(fvBD, tnIgmpSnoopPolName='')
fvRsCtx = cobra.model.fv.RsCtx(fvBD, tnFvCtxName='ExampleApiTenant_VRF')
fvRsBdToEpRet = cobra.model.fv.RsBdToEpRet(fvBD, resolveAct='resolve', tnFvEpRetPolName='')
fvRsBDToNdP = cobra.model.fv.RsBDToNdP(fvBD, tnNdIfPolName='')
fvRsTenantMonPol = cobra.model.fv.RsTenantMonPol(fvTenant, tnMonEPGPolName='')
fvAp = cobra.model.fv.Ap(fvTenant, ownerKey='', name='DMZ-AP1', prio='unspecified', descr='', nameAlias='', ownerTag='')
fvAEPg = cobra.model.fv.AEPg(fvAp, isAttrBasedEPg='no', matchT='AtleastOne', name='DMZ-DB', descr='', fwdCtrl='', prefGrMemb='exclude', nameAlias='', prio='unspecified', pcEnfPref='unenforced')
fvRsProv = cobra.model.fv.RsProv(fvAEPg, tnVzBrCPName='AllTraffic', matchT='AtleastOne', prio='unspecified')
fvRsDomAtt = cobra.model.fv.RsDomAtt(fvAEPg, tDn='uni/vmmp-VMware/dom-ssacimn010a02vds01', primaryEncap='unknown', classPref='encap', delimiter='', instrImedcy='immediate', encap='unknown', encapMode='auto', netflowPref='disabled', resImedcy='immediate')
fvRsCustQosPol = cobra.model.fv.RsCustQosPol(fvAEPg, tnQosCustomPolName='')
fvRsBd = cobra.model.fv.RsBd(fvAEPg, tnFvBDName='DMZ_BD')
fvAEPg2 = cobra.model.fv.AEPg(fvAp, isAttrBasedEPg='no', matchT='AtleastOne', name='DMZ-Web', descr='', fwdCtrl='', prefGrMemb='exclude', nameAlias='', prio='unspecified', pcEnfPref='unenforced')
fvRsDomAtt2 = cobra.model.fv.RsDomAtt(fvAEPg2, tDn='uni/vmmp-VMware/dom-ssacimn010a02vds01', primaryEncap='unknown', classPref='encap', delimiter='', instrImedcy='immediate', encap='unknown', encapMode='auto', netflowPref='disabled', resImedcy='immediate')
fvRsCons = cobra.model.fv.RsCons(fvAEPg2, tnVzBrCPName='AllTraffic', prio='unspecified')
fvRsCustQosPol2 = cobra.model.fv.RsCustQosPol(fvAEPg2, tnQosCustomPolName='')
fvRsBd2 = cobra.model.fv.RsBd(fvAEPg2, tnFvBDName='DMZ_BD')


# commit the generated code to APIC
print toXMLStr(polUni)
c = cobra.mit.request.ConfigRequest()
c.addMo(polUni)
md.commit(c)

